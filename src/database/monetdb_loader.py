from src.base_classes import DatabaseLoader
import pandas as pd
import time
from tqdm import tqdm
import numpy as np

"""
Chargeur de donnÃ©es pour MonetDB.

Ce module fournit une implÃ©mentation concrÃ¨te de DatabaseLoader pour MonetDB,
permettant le chargement et la gestion des donnÃ©es depuis des fichiers CSV.
"""

class MonetDBLoader(DatabaseLoader):
    """
    Chargeur de donnÃ©es pour MonetDB. GÃ¨re le chargement des fichiers CSV dans la base de donnÃ©es.

    Cette classe hÃ©rite de DatabaseLoader et implÃ©mente les mÃ©thodes spÃ©cifiques Ã  MonetDB
    pour le chargement et la vÃ©rification des donnÃ©es.

    Attributes:
        connector: Instance de MonetDBConnector pour la connexion Ã  la base de donnÃ©es

    Methods:
        table_exists(nom_table: str) -> bool:
            VÃ©rifie si une table existe dans la base de donnÃ©es.

        get_row_count(nom_table: str) -> int:
            Retourne le nombre de lignes dans une table.

        load_csv(chemin_csv: str, nom_table: str, separateur: str = ',', batch_size: int = 1000) -> dict:
            Charge un fichier CSV dans une table MonetDB.
    """

    def table_exists(self, nom_table: str) -> bool:
        """
        VÃ©rifie si une table existe dans la base de donnÃ©es MonetDB.

        Args:
            nom_table (str): Nom de la table Ã  vÃ©rifier

        Returns:
            bool: True si la table existe, False sinon

        Example:
            >>> loader = MonetDBLoader(connector)
            >>> exists = loader.table_exists("air_quality")
            >>> print(f"La table existe: {exists}")
        """
        conn = self.connector.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT COUNT(*) 
            FROM sys.tables 
            WHERE name = %s 
            AND system = false
        """, (nom_table,))
        return cursor.fetchone()[0] > 0

    def get_row_count(self, nom_table: str) -> int:
        """
        Retourne le nombre de lignes dans une table MonetDB.

        Args:
            nom_table (str): Nom de la table dont on veut compter les lignes

        Returns:
            int: Nombre de lignes dans la table

        Example:
            >>> loader = MonetDBLoader(connector)
            >>> count = loader.get_row_count("air_quality")
            >>> print(f"Nombre de lignes: {count}")
        """
        conn = self.connector.get_connection()
        cursor = conn.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {nom_table}")
        return cursor.fetchone()[0]

    def load_csv(self, chemin_csv: str, nom_table: str, separateur: str = ',', batch_size: int = 1000) -> dict:
        """
        Charge un fichier CSV dans une table MonetDB.
        """
        print(f"\nðŸ“Š MonetDB: Chargement de {nom_table}")
        
        conn = self.connector.get_connection()
        cursor = conn.cursor()
        
        start_time = time.time()
        
        print("   â”œâ”€ VÃ©rification de la table existante...")
        if self.table_exists(nom_table):
            cursor.execute(f"DROP TABLE IF EXISTS {nom_table}")
        
        print("   â”œâ”€ Lecture du fichier CSV...")
        df = pd.read_csv(chemin_csv, sep=separateur)
        df = self.clean_column_names(df)
        df = df.replace({pd.NA: None, np.nan: None})
        total_rows = len(df)
        
        print(f"   â”œâ”€ CrÃ©ation de la table ({len(df.columns)} colonnes)")
        
        # CrÃ©ation de la table avec les types appropriÃ©s
        columns = []
        for col in df.columns:
            dtype = df[col].dtype
            if dtype == 'int64':
                sql_type = 'BIGINT'
            elif dtype == 'float64':
                sql_type = 'DOUBLE PRECISION'
            else:
                sql_type = 'VARCHAR(1024)'
            columns.append(f'"{col}" {sql_type}')
        
        create_table_sql = f'CREATE TABLE "{nom_table}" ({", ".join(columns)})'
        cursor.execute(create_table_sql)
        
        print(f"   â””â”€ Insertion des donnÃ©es ({total_rows:,} lignes)", end='\r')
        with tqdm(total=total_rows, unit='lignes', ncols=80) as pbar:
            for i in range(0, len(df), batch_size):
                batch = df.iloc[i:i + batch_size]
                
                # PrÃ©paration des valeurs pour l'insertion
                placeholders = ','.join(['%s' for _ in range(len(df.columns))])
                column_names = '","'.join(df.columns)
                insert_sql = f'INSERT INTO "{nom_table}" ("{column_names}") VALUES ({placeholders})'
                
                # Conversion des donnÃ©es en liste de tuples
                data = [tuple(x) for x in batch.values]
                
                # ExÃ©cution de l'insertion
                cursor.executemany(insert_sql, data)
                pbar.update(len(batch))
        
        print(f"\r      âœ“ {total_rows:,} lignes insÃ©rÃ©es")
        
        conn.commit()
        end_time = time.time()
        total_time = end_time - start_time
        
        return {
            'table_name': nom_table,
            'load_time': total_time,
            'total_rows': total_rows
        }